{"version":3,"sources":["components/Sidebar.js","components/Editor.js","App.js","reportWebVitals.js","index.js"],"names":["Sidebar","props","noteElements","notes","map","note","index","react_default","a","createElement","className","key","id","concat","currentNote","onClick","setCurrentNoteId","body","split","event","deleteNote","newNote","Editor","_ref","updateNote","_React$useState","React","useState","_React$useState2","Object","slicedToArray","selectedTab","setSelectedTab","converter","Showdown","Converter","tables","simplifiedAutoLink","strikethrough","tasklists","js_default","value","onChange","onTabChange","generateMarkdownPreview","markdown","Promise","resolve","makeHtml","minEditorHeight","heightUnits","App","JSON","parse","localStorage","getItem","setNotes","_React$useState3","_React$useState4","pageTitle","setPageTitle","_React$useState5","_React$useState6","currentNoteId","createNewNote","nanoid","prevNotes","toConsumableArray","findCurrentNote","find","useEffect","setItem","stringify","current","Date","date","getMonth","getDate","getFullYear","placeholder","prevTitle","target","length","react_split_es","sizes","direction","noteId","stopPropagation","filter","text","oldNotes","newArry","unshift","objectSpread","push","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","App_App"],"mappings":"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","file":"static/js/main.625d25ce.chunk.js","sourcesContent":["import React from \"react\"\n\nexport default function Sidebar(props) {\n    const noteElements = props.notes.map((note, index) => (\n        <div className=\"sidebar--container\" key={note.id}>\n            <div\n                \n                className={`title ${\n                    note.id === props.currentNote.id ? \"selected-note\" : \"\"\n                }`}\n                onClick={() => props.setCurrentNoteId(note.id)}\n            >\n                <h4 className=\"text-snippet\">{note.body.split(\"\\n\")[0]}</h4>\n                <button \n                    className=\"delete-btn\"\n                    onClick={(event) => props.deleteNote(event, note.id)}\n                >\n                    <i className=\"gg-trash trash-icon\"></i>\n                </button>\n            </div>\n        </div>\n    ))\n\n    return (\n        <section className=\"pane sidebar\">\n            <div className=\"sidebar--header\">\n                <h4>Create New Note</h4>\n                <button className=\"new-note\" onClick={props.newNote}>+</button>\n            </div>\n            {noteElements}\n        </section>\n    )\n}\n","import React from \"react\"\nimport ReactMde from \"react-mde\"\nimport Showdown from \"showdown\" \nimport \"react-mde/lib/styles/css/react-mde-all.css\";\n\n\nexport default function Editor({ currentNote, updateNote }) {\n    const [selectedTab, setSelectedTab] = React.useState(\"write\")\n\n    const converter = new Showdown.Converter({\n        tables: true,\n        simplifiedAutoLink: true,\n        strikethrough: true,\n        tasklists: true,\n    })  \n\n    return (\n        <section className=\"pane editor\">\n            <ReactMde\n                value={currentNote.body}\n                onChange={updateNote}\n                selectedTab={selectedTab}\n                onTabChange={setSelectedTab}\n                generateMarkdownPreview={(markdown) =>\n                    Promise.resolve(converter.makeHtml(markdown))\n                }\n                minEditorHeight={80}\n                heightUnits=\"vh\"\n            />\n        </section>\n    )\n}\n","import React from \"react\"\nimport Sidebar from \"./components/Sidebar\"\nimport Editor from \"./components/Editor\"\n// import { data } from \"./data\"\nimport Split from \"react-split\"\nimport {nanoid} from \"nanoid\"\nimport \"./App.css\"\n\n\nexport default function App() { \n\n  const [notes, setNotes] = React.useState(() => JSON.parse(localStorage.getItem(\"notes\")) || [])\n\n\n  const [pageTitle, setPageTitle] = React.useState(\n    () => JSON.parse(localStorage.getItem(\"pageTitle\") || \"Notes Thoughts\")\n  )\n\n  const [currentNoteId, setCurrentNoteId] = React.useState( notes[0] && notes[0].id || '')\n\n  React.useEffect(() => {\n    localStorage.setItem(\"notes\", JSON.stringify(notes))\n  },[notes])\n\n\n    \nfunction createNewNote() {\n const newNote = {\n  id : nanoid(),\n  body : \"type your thoughts here\"\n }\n setNotes(prevNotes => [newNote, ...prevNotes])\n setCurrentNoteId(newNote.id)\n\n}\n\nfunction updateNote(text) {\n  setNotes(oldNotes => {\n    const newArry = [] \n    oldNotes.map( note => {\n      return (\n        note.id === currentNoteId ?\n        newArry.unshift({...note, body:text}) :\n        newArry.push(note)\n    )}\n    )\n    return newArry\n  })\n  \n  // setNotes (oldNotes => {\n  //   const newArry = []\n  //   for(var i = 0 ; i < oldNotes.length ; i++) {\n  //     const oldNote = oldNotes[i]; \n  //     if (oldNote.id === currentNoteId) {\n  //       newArry.unshift({...oldNote, body:text})\n  //     } else {\n  //       newArry.push(oldNote)\n  //     }\n  //   }return newArry\n  // }\n  // )\n  \n}\n\nfunction deleteNote(event, noteId) {\n  event.stopPropagation()\n  setNotes(prevNotes =>  prevNotes.filter( note => note.id !== noteId ))\n\n}\n\n    function findCurrentNote() {\n      return notes.find( note => {\n        return note.id === currentNoteId \n      }) || notes[0]\n    }\n\n    \n\n    \n\n  const current = new Date()\n  const date = `${current.getMonth()+1} / ${current.getDate()} / ${current.getFullYear()}`\n\n  function renameTitle(event) {\n    setPageTitle(prevTitle => prevTitle = event.target.value)\n  }\n\n  React.useEffect(()=> {\n    localStorage.setItem(\"pageTitle\", JSON.stringify(pageTitle))\n  }, [pageTitle])\n\n\n    \n    return (\n        <main>\n        <div className=\"page-title-container\">\n        <h1 className=\"page-title\">ðŸ““ <input className=\"page-title--input\" placeholder=\"Notes Thoughts\" onChange={renameTitle} value={pageTitle}/></h1>\n         <h4 className=\"page-date\">{date}</h4>\n        </div>\n         \n        {\n            notes.length > 0 \n            ?\n            <Split \n                sizes={[30, 70]} \n                direction=\"horizontal\" \n                className=\"split\"\n            >\n                <Sidebar\n       notes={notes}\n                    currentNote={findCurrentNote()}\n                    setCurrentNoteId={setCurrentNoteId}\n                    newNote={createNewNote}\n                    deleteNote={deleteNote}\n                />\n                {\n                    currentNoteId && \n                    notes.length > 0 &&\n                    <Editor \n                        currentNote={findCurrentNote()} \n                        updateNote={updateNote} \n                    />\n                }\n            </Split>\n            :\n            <div className=\"no-notes\">\n                <h1>You have no notes</h1>\n                <button \n                    className=\"first-note\" \n                    onClick={createNewNote}\n                >\n                    Create one now\n                </button>\n            </div>\n            \n        }\n        </main>\n    )\n}\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}